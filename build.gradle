buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.5.2"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'cpp'

defaultTasks 'build'

def jdkDir = System.getProperty('java.home')

model {
    buildTypes {
        debug
        release
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
    components {
        nativetime(NativeLibrarySpec) {
            binaries.all {
                if (buildType == buildTypes.debug)
                {
                    cppCompiler.args("-fPIC", "-O2", "-g", "-pedantic", "-Wall", "-Wextra", "-Wcast-align", "-Wcast-qual", "-Wctor-dtor-privacy", "-Wdisabled-optimization", "-Wformat=2",
                            "-Winit-self", "-Wlogical-op", "-Wmissing-declarations", "-Wmissing-include-dirs", "-Wnoexcept", /*"-Wold-style-cast",*/ "-Woverloaded-virtual", "-Wredundant-decls",
                            "-Wshadow", /*"-Wsign-conversion",*/ "-Wsign-promo", "-Wstrict-null-sentinel", "-Wstrict-overflow=5", "-Wswitch-default", "-Wundef", "-Werror", "-Wno-unused")
                }
                else if (buildTypes.release)
                {
                    cppCompiler.args "-fPIC", "-O2"
                }
            }
            sources {
                cpp {
                    exportedHeaders {
                        srcDirs "src/nativetime/headers", "$jdkDir/include", "$jdkDir/include/linux"
                    }
                }
            }
        }
    }
}


def nativeLibPath = "$rootDir/build/libs/nativetime/shared/release"
jmh {
    jmhVersion = '1.26'
    jvmArgsAppend = ["-Djava.library.path=${nativeLibPath}".toString(), '--add-opens','java.base/jdk.internal.misc=ALL-UNNAMED']
    fork = 2
    warmupIterations = 2
    iterations = 2
    forceGC = false //default is false
    includeTests = false
    timeUnit = 'us'
    profilers = ['gc']
    resultFormat = 'JSON'
    /*Supported profilers:
              cl: Classloader profiling via standard MBeans
            comp: JIT compiler profiling via standard MBeans
              gc: GC profiling via standard MBeans
           hs_cl: HotSpot (tm) classloader profiling via implementation-specific MBeans
         hs_comp: HotSpot (tm) JIT compiler profiling via implementation-specific MBeans
           hs_gc: HotSpot (tm) memory manager (GC) profiling via implementation-specific MBeans
           hs_rt: HotSpot (tm) runtime profiling via implementation-specific MBeans
          hs_thr: HotSpot (tm) threading subsystem via implementation-specific MBeans
           stack: Simple and naive Java stack profiler
     */
}

tasks.jmh {
    dependsOn ':nativetimeReleaseSharedLibrary'
}

compileJava {
    options.compilerArgs += ["--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED"]
}

compileTestJava {
    options.compilerArgs += ["--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED"]
}

tasks.withType(Test) {
    dependsOn ':nativetimeReleaseSharedLibrary'
    systemProperty "java.library.path", nativeLibPath
}

test {
    useJUnitPlatform()
    jvmArgs += ["--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED"]
}

dependencies {
    jmh 'org.openjdk.jmh:jmh-core:1.26'
    jmh 'org.openjdk.jmh:jmh-generator-reflection:1.26'
    jmh 'net.sf.jopt-simple:jopt-simple:4.6'
    jmh 'org.apache.commons:commons-math3:3.2'
    implementation 'net.java.dev.jna:jna:4.2.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
}

